name: CI

on:
  push:
    branches: [ '**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - uses: actions/checkout@v3

      # Install required packages. Adjust the list according to your project requirements.
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential
          sudo apt-get install libboost-all-dev
          sudo apt-get install rpm
          sudo apt-get install libhdf5-dev


      # Configure the project with tests enabled
      - name: Configure CMake no tests
        run: |
          mkdir build
          cd build
          cmake ..

      # Build the project using make
      - name: Build
        run: |
          cd build
          make
          sudo make install
      
      - name: Configure CMake with tests and build
        run: |
          cd build
          cmake -DENABLE_TESTS=ON ..
          make

      # Run tests using ctest
      - name: Run tests
        run: |
          cd build/Tests
          ctest --output-on-failure

      - name: Package with CPack
        run: |
          cd build
          sudo cpack
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PySysLinkBase-packages
          path: |
            build/*.deb
            build/*.rpm
            build/*.tar.gz

            Artifact upload introduced on ci cd to save packages
  
  release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: PySysLinkBase-packages

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload Release Assets
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/your_package.tar.gz
          asset_name: your_package.tar.gz
          asset_content_type: application/gzip